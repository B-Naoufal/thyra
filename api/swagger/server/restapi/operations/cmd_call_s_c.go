// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CmdCallSCHandlerFunc turns a function with the right signature into a cmd call s c handler
type CmdCallSCHandlerFunc func(CmdCallSCParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CmdCallSCHandlerFunc) Handle(params CmdCallSCParams) middleware.Responder {
	return fn(params)
}

// CmdCallSCHandler interface for that can handle valid cmd call s c params
type CmdCallSCHandler interface {
	Handle(CmdCallSCParams) middleware.Responder
}

// NewCmdCallSC creates a new http.Handler for the cmd call s c operation
func NewCmdCallSC(ctx *middleware.Context, handler CmdCallSCHandler) *CmdCallSC {
	return &CmdCallSC{Context: ctx, Handler: handler}
}

/* CmdCallSC swagger:route POST /cmd/callSmartContract cmdCallSC

CmdCallSC cmd call s c API

*/
type CmdCallSC struct {
	Context *middleware.Context
	Handler CmdCallSCHandler
}

func (o *CmdCallSC) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCmdCallSCParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CmdCallSCBody cmd call s c body
//
// swagger:model CmdCallSCBody
type CmdCallSCBody struct {

	// operation context
	OperationContext *CmdCallSCParamsBodyOperationContext `json:"operation_context,omitempty"`

	// smart contract context
	SmartContractContext *CmdCallSCParamsBodySmartContractContext `json:"smart_contract_context,omitempty"`
}

// Validate validates this cmd call s c body
func (o *CmdCallSCBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOperationContext(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSmartContractContext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CmdCallSCBody) validateOperationContext(formats strfmt.Registry) error {
	if swag.IsZero(o.OperationContext) { // not required
		return nil
	}

	if o.OperationContext != nil {
		if err := o.OperationContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "operation_context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "operation_context")
			}
			return err
		}
	}

	return nil
}

func (o *CmdCallSCBody) validateSmartContractContext(formats strfmt.Registry) error {
	if swag.IsZero(o.SmartContractContext) { // not required
		return nil
	}

	if o.SmartContractContext != nil {
		if err := o.SmartContractContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "smart_contract_context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "smart_contract_context")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cmd call s c body based on the context it is used
func (o *CmdCallSCBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOperationContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSmartContractContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CmdCallSCBody) contextValidateOperationContext(ctx context.Context, formats strfmt.Registry) error {

	if o.OperationContext != nil {
		if err := o.OperationContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "operation_context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "operation_context")
			}
			return err
		}
	}

	return nil
}

func (o *CmdCallSCBody) contextValidateSmartContractContext(ctx context.Context, formats strfmt.Registry) error {

	if o.SmartContractContext != nil {
		if err := o.SmartContractContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "smart_contract_context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "smart_contract_context")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CmdCallSCBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CmdCallSCBody) UnmarshalBinary(b []byte) error {
	var res CmdCallSCBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CmdCallSCParamsBodyOperationContext Context attributes of the operation to send to a node.
//
// swagger:model CmdCallSCParamsBodyOperationContext
type CmdCallSCParamsBodyOperationContext struct {

	// Set the expiry duration (in ?) of the transaction.
	Expiry int64 `json:"expiry,omitempty"`

	// Set the fee amount (in massa) that will be given to the block creator.
	Fee float64 `json:"fee,omitempty"`

	// gaz
	Gaz *CmdCallSCParamsBodyOperationContextGaz `json:"gaz,omitempty"`

	// Identifier of the originator of the transaction. This identifier must be knowned by the thick client.
	Originator string `json:"originator,omitempty"`
}

// Validate validates this cmd call s c params body operation context
func (o *CmdCallSCParamsBodyOperationContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGaz(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CmdCallSCParamsBodyOperationContext) validateGaz(formats strfmt.Registry) error {
	if swag.IsZero(o.Gaz) { // not required
		return nil
	}

	if o.Gaz != nil {
		if err := o.Gaz.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "operation_context" + "." + "gaz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "operation_context" + "." + "gaz")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cmd call s c params body operation context based on the context it is used
func (o *CmdCallSCParamsBodyOperationContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGaz(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CmdCallSCParamsBodyOperationContext) contextValidateGaz(ctx context.Context, formats strfmt.Registry) error {

	if o.Gaz != nil {
		if err := o.Gaz.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "operation_context" + "." + "gaz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "operation_context" + "." + "gaz")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CmdCallSCParamsBodyOperationContext) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CmdCallSCParamsBodyOperationContext) UnmarshalBinary(b []byte) error {
	var res CmdCallSCParamsBodyOperationContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CmdCallSCParamsBodyOperationContextGaz Gaz attibutes. Gaz is a virtual resource consumed by node while running smart contract.
//
// swagger:model CmdCallSCParamsBodyOperationContextGaz
type CmdCallSCParamsBodyOperationContextGaz struct {

	// Maximum number of gaz unit that a node will be able consume.
	Limit int64 `json:"limit,omitempty"`

	// Price of a gaz unit.
	Price float64 `json:"price,omitempty"`
}

// Validate validates this cmd call s c params body operation context gaz
func (o *CmdCallSCParamsBodyOperationContextGaz) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cmd call s c params body operation context gaz based on context it is used
func (o *CmdCallSCParamsBodyOperationContextGaz) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CmdCallSCParamsBodyOperationContextGaz) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CmdCallSCParamsBodyOperationContextGaz) UnmarshalBinary(b []byte) error {
	var res CmdCallSCParamsBodyOperationContextGaz
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CmdCallSCParamsBodySmartContractContext Smart contract attributes of the operation to send to a node.
//
// swagger:model CmdCallSCParamsBodySmartContractContext
type CmdCallSCParamsBodySmartContractContext struct {

	// function
	Function *CmdCallSCParamsBodySmartContractContextFunction `json:"function,omitempty"`
}

// Validate validates this cmd call s c params body smart contract context
func (o *CmdCallSCParamsBodySmartContractContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CmdCallSCParamsBodySmartContractContext) validateFunction(formats strfmt.Registry) error {
	if swag.IsZero(o.Function) { // not required
		return nil
	}

	if o.Function != nil {
		if err := o.Function.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "smart_contract_context" + "." + "function")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "smart_contract_context" + "." + "function")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cmd call s c params body smart contract context based on the context it is used
func (o *CmdCallSCParamsBodySmartContractContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFunction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CmdCallSCParamsBodySmartContractContext) contextValidateFunction(ctx context.Context, formats strfmt.Registry) error {

	if o.Function != nil {
		if err := o.Function.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "smart_contract_context" + "." + "function")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "smart_contract_context" + "." + "function")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CmdCallSCParamsBodySmartContractContext) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CmdCallSCParamsBodySmartContractContext) UnmarshalBinary(b []byte) error {
	var res CmdCallSCParamsBodySmartContractContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CmdCallSCParamsBodySmartContractContextFunction Function attibutes to call
//
// swagger:model CmdCallSCParamsBodySmartContractContextFunction
type CmdCallSCParamsBodySmartContractContextFunction struct {

	// Address of the smart contract exposing the function
	At string `json:"at,omitempty"`

	// Name of the function to call
	Name string `json:"name,omitempty"`

	// Parameters to pass to the function
	Params string `json:"params,omitempty"`
}

// Validate validates this cmd call s c params body smart contract context function
func (o *CmdCallSCParamsBodySmartContractContextFunction) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cmd call s c params body smart contract context function based on context it is used
func (o *CmdCallSCParamsBodySmartContractContextFunction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CmdCallSCParamsBodySmartContractContextFunction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CmdCallSCParamsBodySmartContractContextFunction) UnmarshalBinary(b []byte) error {
	var res CmdCallSCParamsBodySmartContractContextFunction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
