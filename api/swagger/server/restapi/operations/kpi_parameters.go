// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewKpiParams creates a new KpiParams object
//
// There are no default values defined in the spec.
func NewKpiParams() KpiParams {

	return KpiParams{}
}

// KpiParams contains all the bound params for the kpi operation
// typically these are obtained from a http.Request
//
// swagger:parameters kpi
type KpiParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Min Items: 0
	  Unique: true
	  In: query
	  Collection Format: csv
	*/
	Scope []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewKpiParams() beforehand.
func (o *KpiParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qScope, qhkScope, _ := qs.GetOK("scope")
	if err := o.bindScope(qScope, qhkScope, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindScope binds and validates array parameter Scope from query.
//
// Arrays are parsed according to CollectionFormat: "csv" (defaults to "csv" when empty).
func (o *KpiParams) bindScope(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvScope string
	if len(rawData) > 0 {
		qvScope = rawData[len(rawData)-1]
	}

	// CollectionFormat: csv
	scopeIC := swag.SplitByFormat(qvScope, "csv")
	if len(scopeIC) == 0 {
		return nil
	}

	var scopeIR []string
	for i, scopeIV := range scopeIC {
		scopeI := scopeIV

		if err := validate.EnumCase(fmt.Sprintf("%s.%v", "scope", i), "query", scopeI, []interface{}{"wallet", "node", "stacking", "blockchain"}, true); err != nil {
			return err
		}

		scopeIR = append(scopeIR, scopeI)
	}

	o.Scope = scopeIR
	if err := o.validateScope(formats); err != nil {
		return err
	}

	return nil
}

// validateScope carries on validations for parameter Scope
func (o *KpiParams) validateScope(formats strfmt.Registry) error {

	scopeSize := int64(len(o.Scope))

	// minItems: 0
	if err := validate.MinItems("scope", "query", scopeSize, 0); err != nil {
		return err
	}

	// uniqueItems: true
	if err := validate.UniqueItems("scope", "query", o.Scope); err != nil {
		return err
	}
	return nil
}
